/***********************************************************************
 * Header:
 *    BST
 * Summary:
 *    Our custom implementation of a BST for set and for map
 *      __       ____       ____         __
 *     /  |    .'    '.   .'    '.   _  / /
 *     `| |   |  .--.  | |  .--.  | (_)/ /
 *      | |   | |    | | | |    | |   / / _
 *     _| |_  |  `--'  | |  `--'  |  / / (_)
 *    |_____|  '.____.'   '.____.'  /_/
 *
 *    This will contain the class definition of:
 *        BST                 : A class that represents a binary search tree
 *        BST::iterator       : An iterator through BST
 * Author
 *    <your names here>
 ************************************************************************/

#pragma once

#ifdef DEBUG
#define debug(x) x
#else // !DEBUG
#define debug(x)
#endif // !DEBUG

#include <cassert>
#include <utility>
#include <memory>     // for std::allocator
#include <functional> // for std::less
#include <utility>    // for std::pair

class TestBST; // forward declaration for unit tests
class TestMap;
class TestSet;

namespace custom
{

   template <class TT>
   class set;
   template <class KK, class VV>
   class map;

/*****************************************************************
 * BINARY SEARCH TREE
 * Create a Binary Search Tree
 *****************************************************************/
template <typename T>
class BST
{
    friend class ::TestBST; // give unit tests access to the privates
    friend class ::TestMap;
    friend class ::TestSet;
    
    template <class KK, class VV>
    friend class map;
    
    template <class TT>
    friend class set;
    
    template <class KK, class VV>
    friend void swap(map<KK, VV>& lhs, map<KK, VV>& rhs);
public:
    //
    // Construct
    //
    
    BST();
    BST(const BST &  rhs);
    BST(      BST && rhs);
    BST(const std::initializer_list<T>& il);
    ~BST();
    
    //
    // Assign
    //
    
    BST & operator = (const BST &  rhs);
    BST & operator = (      BST && rhs);
    BST & operator = (const std::initializer_list<T>& il);
    void swap(BST & rhs);
    
    //
    // Iterator
    //
    
    class iterator;
    iterator   begin() const noexcept;
    iterator   end()   const noexcept { return iterator(nullptr); }
    
    //
    // Access
    //
    
    iterator find(const T& t);
    
    //
    // Insert
    //
    
    std::pair<iterator, bool> insert(const T&  t, bool keepUnique = false);
    std::pair<iterator, bool> insert(      T&& t, bool keepUnique = false);
    
    //
    // Remove
    //
    
    iterator erase(iterator& it);
    void   clear() noexcept;
    
    //
    // Status
    //
    
    bool   empty() const noexcept { return size() == 0; }
    size_t size()  const noexcept { return numElements;   }
    
    
private:
    
    class BNode;
    BNode * root;              // root node of the binary search tree
    size_t numElements;        // number of elements currently in the tree
    
public:
    void copyBinaryTree(const BNode* pSrc, BNode*& pDest);
    void insertNode(BNode* current, BNode* newNode);
    void clearTree(BNode* node) noexcept ;
    void deleteBinaryTree(BNode*& pDelete) noexcept;
    void deleteNode(BNode*& pDelete, bool toRight);
    
};


/*****************************************************************
 * BINARY NODE
 * A single node in a binary tree. Note that the node does not know
 * anything about the properties of the tree so no validation can be done.
 *****************************************************************/
template <typename T>
class BST <T> :: BNode
{
public:
   //
   // Construct
   //
   BNode()
    : pLeft(nullptr), pRight(nullptr), pParent(nullptr), data()
   {
   }
   BNode(const T &  t)
    : pLeft(nullptr), pRight(nullptr), pParent(nullptr), data()
   {
   }
   BNode(T && t)
    : pLeft(nullptr), pRight(nullptr), pParent(nullptr), data(std::move(t))
   {
   }

   //
   // Insert
   //
   void addLeft (BNode * pNode);
   void addRight(BNode * pNode);
   void addLeft (const T &  t);
   void addRight(const T &  t);
   void addLeft(       T && t);
   void addRight(      T && t);

   //
   // Status
   //
    bool isRightChild(BNode * pNode) const { return pRight == pNode;}
    bool isLeftChild( BNode * pNode) const { return pLeft == pNode;}
    
   //
   // Data
   //
   T data;                  // Actual data stored in the BNode
   BNode* pLeft;          // Left child - smaller
   BNode* pRight;         // Right child - larger
   BNode* pParent;        // Parent
   bool isRed;              // Red-black balancing stuff
};

/**********************************************************
 * BINARY SEARCH TREE ITERATOR
 * Forward and reverse iterator through a BST
 *********************************************************/
template <typename T>
class BST <T> :: iterator
{
   friend class ::TestBST; // give unit tests access to the privates
   friend class ::TestMap;
   friend class ::TestSet;

   template <class KK, class VV>
   friend class map;

   template <class TT>
   friend class set;
public:
   // constructors and assignment
    iterator(BNode* p = nullptr)
    {
        pNode = p;
    }

    iterator(const iterator & rhs)
    {
        pNode = rhs.pNode;
    }
    
   iterator & operator = (const iterator & rhs)
    {
       pNode = rhs.pNode;
       return *this;
   }

   // compare
   bool operator == (const iterator & rhs) const
   {
       return rhs.pNode == pNode;
   }
   bool operator != (const iterator & rhs) const
   {
       return rhs.pNode != pNode;
   }

   // de-reference. Cannot change because it will invalidate the BST
   const T & operator * () const
   {
       return pNode->data;
   }

   // increment and decrement
   iterator & operator ++ ();
   iterator   operator ++ (int postfix)
   {
       iterator temp = *this;
       ++(*this);
       return temp;
   }
   iterator & operator -- ();
   iterator   operator -- (int postfix)
   {
       iterator temp = *this;
       --(*this);
       return temp;
   }

    BNode* getNode() {
        return pNode;
    }
   // must give friend status to remove so it can call getNode() from it
   friend BST <T> :: iterator BST <T> :: erase(iterator & it);

private:
   
    // the node
    BNode * pNode;
};


/*********************************************
 *********************************************
 *********************************************
 ******************** BST ********************
 *********************************************
 *********************************************
 *********************************************/


 /*********************************************
  * BST :: DEFAULT CONSTRUCTOR
  ********************************************/
template <typename T>
BST <T> ::BST()
{
    numElements = 0;
    root = nullptr;
}

/*********************************************
 * BST :: COPY CONSTRUCTOR
 * Copy one tree to another
 ********************************************/
template <typename T>
BST <T> :: BST ( const BST<T>& rhs)
: root(nullptr), numElements(0)
{
    *this = rhs;
}

/*********************************************
 * BST :: MOVE CONSTRUCTOR
 * Move one tree to another
 ********************************************/
template <typename T>
BST <T> :: BST(BST <T> && rhs)
: root(nullptr), numElements(0)
{
    root = rhs.root;
    rhs.root = nullptr;
    
    numElements = rhs.numElements;
    rhs.numElements = 0;
}

/*********************************************
 * BST :: INITIALIZER LIST CONSTRUCTOR
 * Create a BST from an initializer list
 ********************************************/
template <typename T>
BST <T> ::BST(const std::initializer_list<T>& il)
{
    numElements = 0;
    root = nullptr;
    for (const T& element:il) {
        insert(element);
    }
}

/*********************************************
 * BST :: DESTRUCTOR
 ********************************************/
template <typename T>
BST <T> :: ~BST()
{
    clear();
}


/*********************************************
 * BST :: ASSIGNMENT OPERATOR
 * Copy one tree to another
 ********************************************/
template <typename T>
BST <T> & BST <T> :: operator = (const BST <T> & rhs)
{
    copyBinaryTree(rhs.root, this->root);
    this->numElements = rhs.numElements;
    return *this;
}

/*********************************************
 * BST :: ASSIGNMENT OPERATOR with INITIALIZATION LIST
 * Copy nodes onto a BTree
 ********************************************/
template <typename T>
BST <T> & BST <T> :: operator = (const std::initializer_list<T>& il)
{
    deleteBinaryTree(root);
    numElements = 0;
    for (auto&& element: il) {
        insert(element);
    }
    return *this;
}

/*********************************************
 * BST :: ASSIGN-MOVE OPERATOR
 * Move one tree to another
 ********************************************/
template <typename T>
BST <T> & BST <T> :: operator = (BST <T> && rhs)
{
    clear();
    swap(rhs);
    return *this;
}

/*********************************************
 * BST :: SWAP
 * Swap two trees
 ********************************************/
template <typename T>
void BST <T> :: swap (BST <T>& rhs)
{
    std::swap(rhs.root, root);
    std::swap(rhs.numElements,numElements);
}

/*****************************************************
 * BST :: INSERT
 * Insert a node at a given location in the tree
 ****************************************************/
template <typename T>
std::pair<typename BST <T> :: iterator, bool> BST <T> :: insert(const T & t, bool keepUnique)
{
    std::pair<iterator, bool> pairReturn(end(), false);
    
    try
    {
        if (root == nullptr)
        {
            root = new BNode(t);
            numElements = 1;
            pairReturn.first = iterator(root);
            pairReturn.second = true;
            return pairReturn;
        }
        
        BNode* node = root;
        bool done = false;
        while (!done)
        {
            if (keepUnique && t == node-> data)
            {
                pairReturn.first = iterator(node);
                pairReturn.second = false;
                return pairReturn;
            }
            
            if (t < node-> data)
            {
                if (node->pLeft)
                    node = node->pLeft;
                
                else
                {
                    node->addRight(t);
                    done = true;
                    pairReturn.first = iterator(node->pRight);
                    pairReturn.second = true;
                }
            }
        }
        
        numElements++;
        while (root->pParent != nullptr)
            root = root->pParent;
    }
    catch(...)
    {throw "Error";}
    return pairReturn;
}

template <typename T>
std::pair<typename BST <T> ::iterator, bool> BST <T> ::insert(T&& t, bool keepUnique)
{
    std::pair<iterator, bool> pairReturn(end(), false);
    
    try
    {
        if (root == nullptr)
        {
            root = new BNode(t);
            numElements = 1;
            pairReturn.first = iterator(root);
            pairReturn.second = true;
            return pairReturn;
        }
        
        BNode* node = root;
        bool done = false;
        while (!done)
        {
            if (keepUnique && t == node-> data)
            {
                pairReturn.first = iterator(node);
                pairReturn.second = false;
                return pairReturn;
            }
            
            if (t < node-> data)
            {
                if (node->pLeft)
                    node = node->pLeft;
                
                else
                {
                    node->addRight(t);
                    done = true;
                    pairReturn.first = iterator(node->pRight);
                    pairReturn.second = true;
                }
            }
        }
        
        numElements++;
        while (root->pParent != nullptr)
            root = root->pParent;
    }
    catch(...)
    {throw "Error";}
    return pairReturn;

}

/*************************************************
 * BST :: ERASE
 * Remove a given node as specified by the iterator
 ************************************************/
template <typename T>
typename BST <T> ::iterator BST <T> :: erase(iterator & it)
{
    if (it == end()) {
        return end();
    }
    
    BNode* nodeToErase = it.getNode();
    
    BNode* parent = nullptr;
    BNode* current = root;
    while(current != nullptr && current != nodeToErase) {
        parent = current;
        if(nodeToErase->data < current->data) {
            current = current->pLeft;
        } else {
            current = current->pRight;
        }
    }
    if (current != nodeToErase) {
        parent = nullptr;
    }
    
    BNode* parentNode = parent;
    if (!nodeToErase->pLeft) {
        if (parentNode) {
            if (parentNode->pLeft == nodeToErase) {
                parentNode->pLeft = nodeToErase->pRight;
            } else {
                parentNode->pRight = nodeToErase->pRight;
            }
        } else {
            root = nodeToErase->pRight;
        }
    } else if (!nodeToErase->pRight) {
        if (parentNode) {
            if (parentNode->pLeft == nodeToErase) {
                parentNode->pLeft = nodeToErase->pLeft;
            } else {
                parentNode->pRight = nodeToErase->pLeft;
            }
        } else {
            root = nodeToErase->pLeft;
        }
    } else {
        BNode* successor = nodeToErase->pRight;
        while (successor->pLeft) {
            successor = successor->pLeft;
        }
        
        parent = nullptr;
        current = root;
        while(current != nullptr && current != successor) {
            parent = current;
            if(successor->data < current->data) {
                current = current->pLeft;
            } else {
                current = current->pRight;
            }
        }
        if (current != successor) {
            parent = nullptr;
        }
        
        
        BNode* successorParent = parent;
        
        if(parentNode) {
            if (parentNode->pLeft == nodeToErase) {
                parentNode->pLeft = successor;
            } else {
                parentNode->pRight = successor;
            }
        } else {
            root = successor;
        }
        successor->pLeft = nodeToErase->pLeft;
        if (successor != nodeToErase->pRight) {
            successor->pRight = nodeToErase->pRight;
        }
        
        if (successorParent) {
            if (successorParent->pLeft == successor) {
                successorParent->pLeft = nullptr;
            } else {
                successorParent->pRight = nullptr;
            }
        }
    }
    delete nodeToErase;
    numElements--;
    return iterator(end().getNode());
}

/*****************************************************
 * BST :: CLEAR
 * Removes all the BNodes from a tree
 ****************************************************/
template <typename T>
void BST <T> ::clear() noexcept
{
    if (root)
    {
        deleteBinaryTree(root);
    }
    numElements = 0;
}

template <typename T>
void BST<T>::clearTree(BNode* node) noexcept {
    if (node) {
        clearTree(node->pLeft);
        clearTree(node->pRight);
        delete node;
    }
}

/*****************************************************
 * BST :: BEGIN
 * Return the first node (left-most) in a binary search tree
 ****************************************************/
template <typename T>
typename BST <T> :: iterator custom :: BST <T> :: begin() const noexcept
{
    if (root) {
        BNode* leftmost = root;
        while (leftmost->pLeft) {
            leftmost = leftmost->pLeft;
        }
        return iterator(leftmost);
    }
   return end();
}


/****************************************************
 * BST :: FIND
 * Return the node corresponding to a given value
 ****************************************************/
template <typename T>
typename BST <T> :: iterator BST<T> :: find(const T & t)
{
    iterator current = begin();
    iterator endIt = end();
    
    while (current != endIt) {
        if (*current == t) {
            return current;
        }
        else if (t <*current) {
            current++;
        } else {
            break;
        }
    }
    return end();
}


// delete BST
template <typename T>
void BST <T> :: deleteBinaryTree(BNode*& pDelete) noexcept
{
    if (pDelete == nullptr)
    {
        return;
    }
    deleteBinaryTree(pDelete->pLeft);
    deleteBinaryTree(pDelete->pRight);
    
    delete pDelete;
    pDelete = nullptr;
}


/******************************************************
 ******************************************************
 ******************************************************
 *********************** B NODE ***********************
 ******************************************************
 ******************************************************
 ******************************************************/

 
/******************************************************
 * BINARY NODE :: ADD LEFT
 * Add a node to the left of the current node
 ******************************************************/
template <typename T>
void BST <T> :: BNode :: addLeft (BNode * pNode)
{
    this->pLeft = pNode;
}

/******************************************************
 * BINARY NODE :: ADD RIGHT
 * Add a node to the right of the current node
 ******************************************************/
template <typename T>
void BST <T> :: BNode :: addRight (BNode * pNode)
{
    this->pRight = pNode;
}

/******************************************************
 * BINARY NODE :: ADD LEFT
 * Add a node to the left of the current node
 ******************************************************/
template <typename T>
void BST<T> :: BNode :: addLeft (const T & t)
{
    this->pLeft = new BNode(t);
}

/******************************************************
 * BINARY NODE :: ADD LEFT
 * Add a node to the left of the current node
 ******************************************************/
template <typename T>
void BST<T> ::BNode::addLeft(T && t)
{
    this->pLeft = new BNode(std::forward<T>(t));
}

/******************************************************
 * BINARY NODE :: ADD RIGHT
 * Add a node to the right of the current node
 ******************************************************/
template <typename T>
void BST <T> :: BNode :: addRight (const T & t)
{
    
    this->pRight = new BNode(t);
    
}

/******************************************************
 * BINARY NODE :: ADD RIGHT
 * Add a node to the right of the current node
 ******************************************************/
template <typename T>
void BST <T> ::BNode::addRight(T && t)
{
    this->pRight = new BNode(std::forward<T>(t));
}



/*************************************************
 *************************************************
 *************************************************
 ****************** ITERATOR *********************
 *************************************************
 *************************************************
 *************************************************/

/**************************************************
 * BST ITERATOR :: INCREMENT PREFIX
 * advance by one
 *************************************************/
template <typename T>
typename BST <T> :: iterator & BST <T> :: iterator :: operator ++ ()
{
    if (!pNode) {
        return *this;
    }
    
    if (pNode->pRight) {
        pNode = pNode->pRight;
        while (pNode->pLeft) {
            pNode = pNode->pLeft;
        }
    }
    
    else {
        BNode * parent = pNode->pParent;
        while(parent && pNode == parent->pRight) {
            pNode = parent;
            parent = parent->pParent;
        }
        pNode = parent;
    }
    return *this;
}

/**************************************************
 * BST ITERATOR :: DECREMENT PREFIX
 * advance by one
 *************************************************/
template <typename T>
typename BST <T> :: iterator & BST <T> :: iterator :: operator -- ()
{
    if(!pNode) {
        return *this;
    }
    
    if(pNode->pLeft) {
        pNode = pNode->pLeft;
        while (pNode->pRight) {
            pNode = pNode->pRight;
        }
    }
    else {
        BNode* parent = pNode->pParent;
        while (parent && pNode == parent->pLeft) {
            pNode = parent;
            parent = parent->pParent;
        }
        pNode = parent;
    }
    return *this;
}


} // namespace custom


